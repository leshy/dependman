// Generated by LiveScript 1.3.1
(function(){
  var ref$, map, fold1, keys, values, first, flatten, util, h, p, _, promisify, sneakyPromise, slice$ = [].slice;
  ref$ = require('prelude-ls'), map = ref$.map, fold1 = ref$.fold1, keys = ref$.keys, values = ref$.values, first = ref$.first, flatten = ref$.flatten;
  util = require('util');
  h = require('helpers');
  p = require('bluebird');
  _ = require('underscore');
  promisify = exports.promisify = function(f){
    return function(){
      var args;
      args = slice$.call(arguments);
      return new p(function(resolve, reject){
        var callback, ret;
        callback = function(err, data){
          if (err != null) {
            return reject(err);
          } else {
            return resolve(data);
          }
        };
        ret = f.apply(null, slice$.call(args).concat([callback]));
        if (ret != null) {
          return resolve(ret);
        }
      });
    };
  };
  exports.sneakyPromise = sneakyPromise = (function(){
    sneakyPromise.displayName = 'sneakyPromise';
    var prototype = sneakyPromise.prototype, constructor = sneakyPromise;
    prototype.constructor = function(promise){
      this.promise = promise;
    };
    prototype.gimme = function(){
      return this.promise;
    };
    function sneakyPromise(){}
    return sneakyPromise;
  }());
  exports.sneaky = function(promise){
    return new exports.sneakyPromise(promise);
  };
  exports.run = function(targets, env, wrapper){
    var running, completed, execTargets;
    running = {};
    h.dictMap(targets, function(target, name){
      h.uniMap(target.after, function(targetName){
        if (targets[targetName]) {
          return target.requires = h.push(target.requires, targetName);
        }
      });
      return h.uniMap(target.before, function(targetName){
        var targetTarget;
        if (targetTarget = targets[targetName]) {
          return targetTarget.requires = h.push(targetTarget.requires, name);
        }
      });
    });
    completed = {};
    execTargets = function(){
      return h.dictMap(targets, function(target, name){
        var f;
        if (!_.without.apply(_, [target.requires].concat(slice$.call(keys(completed)))).length) {
          delete targets[name];
          if (wrapper != null) {
            f = wrapper(target.init, env);
          } else {
            f = target.init;
          }
          return promisify(f)(env).then(function(data){
            completed[name] = data;
            return execTargets();
          });
        }
      });
    };
    return execTargets();
  };
}).call(this);
